apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: "androidsvgdrawable"

apply from: 'api_config.gradle'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.miedificio.miedificio"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    'src/main/res-generated',
                    'src/main/res-screen/find-building'
            ]
        }
    }
}

retrolambda {
    jdk System.getenv("JAVA8_HOME")
    defaultMethods true
}



project.ext.support_version = '23.2.1'
project.ext.retrofit_version = '2.0.2'
project.ext.dagger_version = '2.4'
project.ext.okhttp_version = '3.2.0'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    compile "com.android.support:appcompat-v7:$support_version"
    compile "com.android.support:cardview-v7:$support_version"
    compile "com.android.support:recyclerview-v7:$support_version"
    compile "com.android.support:design:$support_version"

    compile 'net.sourceforge.streamsupport:streamsupport:1.4.3'

    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-jackson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava:$retrofit_version"

    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    compile "com.google.dagger:dagger:$dagger_version"
    apt "com.google.dagger:dagger-compiler:$dagger_version"

    compile 'com.github.hathibelagal.librarytutorial:mylittlelibrary:1.0.1@aar'

    compile 'io.reactivex:rxjava:1.1.3'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.trello:rxlifecycle:0.5.0'
}


// SVG Tasks

// create a task to convert SVG to PNG MIPMAP
task svgToMipmapPng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-mipmap')
    // specify the android res folder
    to = file('src/main/res-generated/')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is mipmap
    outputType = 'mipmap'
}

// create a task to convert SVG to PNG DRAWABLE
task svgToDrawablePng(type: fr.avianey.androidsvgdrawable.gradle.SvgDrawableTask) {
    // specify where to pick SVG from
    from = files('src/main/svg-drawable')
    // specify the android res folder
    to = file('src/main/res-generated/')
    // create qualified directories if missing
    createMissingDirectories = true
    // override files only if necessary
    overwriteMode = 'ifModified'
    // let generate PNG for the following densities only
    // if none specified, all densities will be used
    targetedDensities = ['ldpi', 'hdpi', 'mdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi']
    // relative path of the file specifying nine patch specs
    ninePatchConfig = file('src/main/svg-drawable/9patch.json')
    // output format of the generated resources
    outputFormat = 'PNG'
    // output type is drawable (default)
    outputType = 'drawable'
}
